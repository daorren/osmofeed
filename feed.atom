<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daorren.github.io/osmofeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-12-05T01:14:41.957Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://daorren.github.io/osmofeed/index.html"/>
    <link rel="self" href="https://daorren.github.io/osmofeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Web Weekly #116 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-116/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-116/"/>
        <updated>2023-12-03T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello, hello Friends! 👋

How does reactivity work in JS frameworks? What's the deal with the oklch() CSS color function? And how can you ship responsive videos on the web?
This week's Web Weekly includes all the answers and much more. Enjoy!
GitHub rolled out new markdown rendering features to give authors more styling options. And they continue to mess with extend the markdown syntax.
You can now render a custom headline, icon and some color if you use a blockquote with the > [!NOTE] syntax. Fancy!
In total, there are !NOTE, !TIP, !IMPORTANT, !WARNING and !CAUTION.
And that's all cool, but I'm just no fan of these custom markdown solutions. It's all fine for GitHub, sure, but GitHub markdown doesn't stay on GitHub. npm is only one example; does npm support this rendering syntax? (I don't…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A web component to make your text sparkle (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/a-web-component-to-make-your-text-sparkle/</id>
        <link href="https://www.stefanjudis.com/blog/a-web-component-to-make-your-text-sparkle/"/>
        <updated>2023-12-03T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Inspired by Zach Leatherman and the community's recent rediscovery of HTML web components, I sat down to write a quick component to make text sparkle. There can't be enough sparkles (and confetti), right?
Here are some examples of what <sparkly-text /> can do. 👇
Here's a  sparkly-text  in a headline

And here's a paragraph with bigger sparkles .

And here are some colorful sparkles .

If you want to play around with it find the source code on GitHub.


          
          
            Reply to Stefan]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — US politics in a nutshell]]></title>
        <id>65627be343f4111d84b5d4be</id>
        <link href="https://labnotes.org/weekend-reading-us-politics-in-a-nutshell/"/>
        <updated>2023-12-02T23:19:14.000Z</updated>
        <summary type="html"><![CDATA[This week we revisit the PDP-11, learn some CSS, pick some cool apps, take note of AI and ad blockers, and square some politics.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Default Apps 2023]]></title>
        <id>65638ddb43f4111d84b5d711</id>
        <link href="https://labnotes.org/default-apps-2023/"/>
        <updated>2023-11-26T18:29:55.000Z</updated>
        <summary type="html"><![CDATA[(Inspired by Chris Coyier)

📨 Mail Client: Shortwave and Spark
📮 Mail Server: Google
📝 Notes: Notes and Notion
✅ To-Do: Things
📆 Calendar: Fantastical through Google Calendar
📁 Cloud File Storage: iCloud Drive
📖 RSS: Reeder through Feedly]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[oklch() retains perceived lightness for different hue angles (#tilPost)]]></title>
        <id>https://www.stefanjudis.com/today-i-learned/oklch-perceived-lightness/</id>
        <link href="https://www.stefanjudis.com/today-i-learned/oklch-perceived-lightness/"/>
        <updated>2023-11-25T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[As far as I see, it's time to ditch hsl() and use oklch() for color palettes and design systems. Why's that?
For me, it boils down to two reasons.
New devices and monitors can display colors that aren't defined in the sRGB color space used by rgb(), hsl() or hex colors. Isn't it sad that you can't express these vibrant colors in CSS using existing color methods?
It is. And the solution are new CSS color functions that can talk new and fancy monitor tech (namely wide-gamut P3 colors). It's party time y'all — the web gets a color update with fresh and vibrant colors.
There's oklch(), oklab() and also color() to target the wider color space, but let's focus on oklch() because it's the most user-friendly.
oklch()'s parameters (lightness, chroma and hue) are easy to grasp and feel very similar …]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — Darth driver]]></title>
        <id>655951f743f4111d84b5cb43</id>
        <link href="https://labnotes.org/weekend-reading-darth-driver/"/>
        <updated>2023-11-25T22:55:01.000Z</updated>
        <summary type="html"><![CDATA[This week we realize we need this truck, map the entire internet form Nov 1969, don’t obsessed over not getting hired, learn more about our brain and guts, and purchase the “never obsolete” PC.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — AI cycling]]></title>
        <id>65501c0643f4111d84b588af</id>
        <link href="https://labnotes.org/weekend-reading-ai-cycling/"/>
        <updated>2023-11-19T00:07:46.000Z</updated>
        <summary type="html"><![CDATA[This week we complain about GitHub Actions, find the perfect t-shirt, hallucinate to the dictionary, and learn more about the world around us.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — Sorry, nevermind]]></title>
        <id>6541593743f4111d84b52c62</id>
        <link href="https://labnotes.org/weekend-reading-sorry-nevermind/"/>
        <updated>2023-11-12T00:27:02.000Z</updated>
        <summary type="html"><![CDATA[This week we debate: to Next or not to Next? We recall of the future was imagined, many years ago. And we catch a break in the Minecraft bedroom.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #115 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-115/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-115/"/>
        <updated>2023-11-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello, hello Friends! 👋

How does Google do site reliability engineering? Is using relative CSS units (rem) to control spaces like margins and paddings a good idea? Are you ready to adopt native and relaxed CSS nesting?
This week's Web Weekly includes all the answers and much more. Enjoy!
I heard having your own font is important for successful tech companies these days. Vercel followed the playbook and released Geist.
Shortly after, GitHub followed. But the Octocat maintainers didn't release yet another standard coding font, but rather an entire font family — say hello to "Monaspace".
Monaspace is a set of five variable fonts supporting the same font axes. I haven't tried it yet, but theoretically, you could mix and match the fonts, and they'll stay on the same grid. Sweet!
And I must sa…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
</feed>