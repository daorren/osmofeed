<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daorren.github.io/osmofeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-11-27T01:13:43.054Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://daorren.github.io/osmofeed/index.html"/>
    <link rel="self" href="https://daorren.github.io/osmofeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Default Apps 2023]]></title>
        <id>65638ddb43f4111d84b5d711</id>
        <link href="https://labnotes.org/default-apps-2023/"/>
        <updated>2023-11-26T18:29:55.000Z</updated>
        <summary type="html"><![CDATA[(Inspired by Chris Coyier)

üì® Mail Client:¬†Shortwave and Spark
üìÆ Mail Server:¬†Google
üìù Notes:¬†Notes and Notion
‚úÖ To-Do:¬†Things
üìÜ Calendar:¬†Fantastical¬†through¬†Google Calendar
üìÅ Cloud File Storage:¬†iCloud¬†Drive
üìñ RSS:¬†Reeder through Feedly]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[oklch() retains perceived lightness for different hue angles (#tilPost)]]></title>
        <id>https://www.stefanjudis.com/today-i-learned/oklch-perceived-lightness/</id>
        <link href="https://www.stefanjudis.com/today-i-learned/oklch-perceived-lightness/"/>
        <updated>2023-11-25T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[As far as I see, it's time to ditch hsl() and use oklch() for color palettes and design systems. Why's that?
For me, it boils down to two reasons.
New devices and monitors can display colors that aren't defined in the sRGB color space used by rgb(), hsl() or hex colors. Isn't it sad that you can't express these vibrant colors in CSS using existing color methods?
It is. And the solution are new CSS color functions that can talk new and fancy monitor tech (namely wide-gamut P3 colors). It's party time y'all ‚Äî the web gets a color update with fresh and vibrant colors.
There's oklch(), oklab() and also color() to target the wider color space, but let's focus on oklch() because it's the most user-friendly.
oklch()'s parameters (lightness, chroma and hue) are easy to grasp and feel very similar ‚Ä¶]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading ‚Äî Darth driver]]></title>
        <id>655951f743f4111d84b5cb43</id>
        <link href="https://labnotes.org/weekend-reading-darth-driver/"/>
        <updated>2023-11-25T22:55:01.000Z</updated>
        <summary type="html"><![CDATA[This week we realize we need this truck, map the entire internet form Nov 1969, don‚Äôt obsessed over not getting hired, learn more about our brain and guts, and purchase the ‚Äúnever obsolete‚Äù PC.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading ‚Äî AI cycling]]></title>
        <id>65501c0643f4111d84b588af</id>
        <link href="https://labnotes.org/weekend-reading-ai-cycling/"/>
        <updated>2023-11-19T00:07:46.000Z</updated>
        <summary type="html"><![CDATA[This week we complain about GitHub Actions, find the perfect t-shirt, hallucinate to the dictionary, and learn more about the world around us.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading ‚Äî Sorry, nevermind]]></title>
        <id>6541593743f4111d84b52c62</id>
        <link href="https://labnotes.org/weekend-reading-sorry-nevermind/"/>
        <updated>2023-11-12T00:27:02.000Z</updated>
        <summary type="html"><![CDATA[This week we debate: to Next or not to Next? We recall of the future was imagined, many years ago. And we catch a break in the Minecraft bedroom.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #115 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-115/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-115/"/>
        <updated>2023-11-11T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello, hello Friends! üëã

How does Google do site reliability engineering? Is using relative CSS units (rem) to control spaces like margins and paddings a good idea? Are you ready to adopt native and relaxed CSS nesting?
This week's Web Weekly includes all the answers and much more. Enjoy!
I heard having your own font is important for successful tech companies these days. Vercel followed the playbook and released Geist.
Shortly after, GitHub followed. But the Octocat maintainers didn't release yet another standard coding font, but rather an entire font family ‚Äî say hello to "Monaspace".
Monaspace is a set of five variable fonts supporting the same font axes. I haven't tried it yet, but theoretically, you could mix and match the fonts, and they'll stay on the same grid. Sweet!
And I must sa‚Ä¶]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #114 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-114/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-114/"/>
        <updated>2023-10-31T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello Hello!

Do your React useEffect hooks include race conditions? Have you heard of the perspective() CSS function? Would you use Next.js?
This week's Web Weekly includes all the answers and much more. Enjoy!
With macOS Sonoma, it's possible to "install" web pages as Safari web apps with the new "add to dock" feature.
I use Chrome (for work) and Firefox (for private), so why would I care? I use Gmail, Google Calendar and Twitter as standalone Chrome apps to get them out of my tab bar. But they have some annoyances.
I gave "add to dock" a spin, and I'll stick to it. Here's why:
I can spin up an installed web app without kicking off the base browser. If I install a Safari web app, it's its own thing. It has its own cookies, history and can be opened independently. It always bugged me that‚Ä¶]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Too small touch targets (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/too-small-touch-targets/</id>
        <link href="https://www.stefanjudis.com/blog/too-small-touch-targets/"/>
        <updated>2023-10-31T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here's an interesting UI pattern from GitHub.üëá
I'm no big GitHub mobile user, but occasionally, I browse projects while on the go. With the fat finger problem, navigating complex sites can be a pain. And the same goes for GitHub. The account owner and repository home link are super close to each other in the header. Just by looking at them, every mobile user knows that hitting the right target requires surgical tap precision.
What does GitHub do about these tiny and too-close-to-each-other links? Change the design? Obviously not. They change the UI functionality entirely and put the account owner and repository into a button.
The button then opens a modal that asks where you want to go. Smart.
What's a good target size, though?
The freshly released Web Content Accessibility Guidelines (WC‚Ä¶]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading ‚Äî Happy "let‚Äôs circle back after the holidays" season]]></title>
        <id>653420c76dcc20561bc74c85</id>
        <link href="https://labnotes.org/weekend-reading-happy-lets-circle-back-after-the-holidays-season/"/>
        <updated>2023-10-29T17:29:19.000Z</updated>
        <summary type="html"><![CDATA[This week we tell jokes about programmers, return to COBOL, change traffic lights to blue, hear voices, discover embeddings, ride a tricycle from 1936, and sleep like a whale.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS surprise: Array.every() always returns true for empty arrays (#note)]]></title>
        <id>https://www.stefanjudis.com/notes/array-every-always-returns-true-for-empty-arrays/</id>
        <link href="https://www.stefanjudis.com/notes/array-every-always-returns-true-for-empty-arrays/"/>
        <updated>2023-10-28T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[JavaScript is always good for a surprise, isn't it?
Nicholas C. Zakas published a discovery that made my head spin. Do you know the array method every?
This is how MDN describes what it does:
The every() method of Array instances tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.
Cool, that makes sense.
const collection = ['great', 'nope', 'great'];
const allItemsAreGreat = collection.every((item) => item === 'great'); // false

But now, see what happens when you use every with an empty array.
[].every((item) => item === 'great'); // true
[].every((item) => item !== 'great'); // true

Whoops?! I didn't expect that every() will tell me that every item matches my condition if there are none. That's not how my brain works.
When using the array method, you have to flip around your mindset. Here's Nicholas:
I‚Äôd suggest changing the way you read every() calls when you come across them. Instead of reading every() as ‚Äúdoes every item in this array match this condition?‚Äù read it as, ‚Äúis there any item in this array that doesn‚Äôt match this condition?‚Äù.
And it gets every weirder. Check the results for an empty array with some().
[].some((item) => item === 'great'); // false
[].some((item) => item !== 'great'); // false

Oh boy... Why do the array methods behave that way? The answer is Math, and if you want to dive deeper, check Nicholas' post. üíØ


          
          
            Reply to Stefan]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
</feed>