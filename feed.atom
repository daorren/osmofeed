<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daorren.github.io/osmofeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-11-12T01:15:58.802Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://daorren.github.io/osmofeed/index.html"/>
    <link rel="self" href="https://daorren.github.io/osmofeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — Sorry, nevermind]]></title>
        <id>6541593743f4111d84b52c62</id>
        <link href="https://labnotes.org/weekend-reading-sorry-nevermind/"/>
        <updated>2023-11-12T00:27:02.000Z</updated>
        <summary type="html"><![CDATA[This week we debate: to Next or not to Next? We recall of the future was imagined, many years ago. And we catch a break in the Minecraft bedroom.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #114 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-114/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-114/"/>
        <updated>2023-10-31T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello Hello!

Do your React useEffect hooks include race conditions? Have you heard of the perspective() CSS function? Would you use Next.js?
This week's Web Weekly includes all the answers and much more. Enjoy!
With macOS Sonoma, it's possible to "install" web pages as Safari web apps with the new "add to dock" feature.
I use Chrome (for work) and Firefox (for private), so why would I care? I use Gmail, Google Calendar and Twitter as standalone Chrome apps to get them out of my tab bar. But they have some annoyances.
I gave "add to dock" a spin, and I'll stick to it. Here's why:
I can spin up an installed web app without kicking off the base browser. If I install a Safari web app, it's its own thing. It has its own cookies, history and can be opened independently. It always bugged me that…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Too small touch targets (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/too-small-touch-targets/</id>
        <link href="https://www.stefanjudis.com/blog/too-small-touch-targets/"/>
        <updated>2023-10-31T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here's an interesting UI pattern from GitHub.👇
I'm no big GitHub mobile user, but occasionally, I browse projects while on the go. With the fat finger problem, navigating complex sites can be a pain. And the same goes for GitHub. The account owner and repository home link are super close to each other in the header. Just by looking at them, every mobile user knows that hitting the right target requires surgical tap precision.
What does GitHub do about these tiny and too-close-to-each-other links? Change the design? Obviously not. They change the UI functionality entirely and put the account owner and repository into a button.
The button then opens a modal that asks where you want to go. Smart.
What's a good target size, though?
The freshly released Web Content Accessibility Guidelines (WC…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — Happy "let’s circle back after the holidays" season]]></title>
        <id>653420c76dcc20561bc74c85</id>
        <link href="https://labnotes.org/weekend-reading-happy-lets-circle-back-after-the-holidays-season/"/>
        <updated>2023-10-29T17:29:19.000Z</updated>
        <summary type="html"><![CDATA[This week we tell jokes about programmers, return to COBOL, change traffic lights to blue, hear voices, discover embeddings, ride a tricycle from 1936, and sleep like a whale.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS surprise: Array.every() always returns true for empty arrays (#note)]]></title>
        <id>https://www.stefanjudis.com/notes/array-every-always-returns-true-for-empty-arrays/</id>
        <link href="https://www.stefanjudis.com/notes/array-every-always-returns-true-for-empty-arrays/"/>
        <updated>2023-10-28T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[JavaScript is always good for a surprise, isn't it?
Nicholas C. Zakas published a discovery that made my head spin. Do you know the array method every?
This is how MDN describes what it does:
The every() method of Array instances tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.
Cool, that makes sense.
const collection = ['great', 'nope', 'great'];
const allItemsAreGreat = collection.every((item) => item === 'great'); // false

But now, see what happens when you use every with an empty array.
[].every((item) => item === 'great'); // true
[].every((item) => item !== 'great'); // true

Whoops?! I didn't expect that every() will tell me that every item matches my condition if there are none. That's not how my brain works.
When using the array method, you have to flip around your mindset. Here's Nicholas:
I’d suggest changing the way you read every() calls when you come across them. Instead of reading every() as “does every item in this array match this condition?” read it as, “is there any item in this array that doesn’t match this condition?”.
And it gets every weirder. Check the results for an empty array with some().
[].some((item) => item === 'great'); // false
[].some((item) => item !== 'great'); // false

Oh boy... Why do the array methods behave that way? The answer is Math, and if you want to dive deeper, check Nicholas' post. 💯


          
          
            Reply to Stefan]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #113 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-113/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-113/"/>
        <updated>2023-10-23T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[Long time no see!

Can a regular expression freeze your JavaScript? Are you looking for some inspiration to get started with Chrome's View Transitions? And do you wish there were more ways to style select elements?
This week's Web Weekly includes all the answers and much more. Enjoy!
Last week's Web Weekly was marked as spam for many people. Why? It included the words "and I pay real money for sending over 4.3k emails" and apparently, this phrase rings some bells in an Apache project called "Spamassassin" used by mail providers.
The project includes a gazillion regular expressions trying to figure out if a mail is spam. Here's the one that flagged me. 🤦‍♂️
If you didn't receive last week's Web Weekly and have a moment, do me a favor and flag the email as non-spam.
And I hit send now and h…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — Sketching a wardrobe]]></title>
        <id>652c6dba6dcc20561bc73a09</id>
        <link href="https://labnotes.org/weekend-reading-sketching-a-wardrobe/"/>
        <updated>2023-10-21T19:03:26.000Z</updated>
        <summary type="html"><![CDATA[This week we look at an open-source read-it-later app, how the world is designed against the elderly, the placebo effect, being a fast moving company, buying a place, and sketching a wardrobe.]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekend Reading — One minor bug]]></title>
        <id>652c25f0b6d6210beb242b2f</id>
        <link href="https://labnotes.org/weekend-reading-7/"/>
        <updated>2023-10-15T22:54:26.000Z</updated>
        <summary type="html"><![CDATA[This week we have some more comics, talk about software development bugs, pretend to be Columbo, obsess over creativity, find Star Trek on a map of the universe, and yes, I just had a cup of coffee …]]></summary>
        <author>
            <name>Assaf Arkin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web Weekly #112 (#blogPost)]]></title>
        <id>https://www.stefanjudis.com/blog/web-weekly-112/</id>
        <link href="https://www.stefanjudis.com/blog/web-weekly-112/"/>
        <updated>2023-10-14T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[It's been a while, friends! 👋

You might have noticed that the last Web Weekly hit your inbox 35 days ago. It's the longest break since I started Web Weekly, and I can't say that this doesn't bug me, but I needed the break. Life was super busy; I moved, traveled countries to speak at a conference, and then got sick for a few days. It's been a ride...
But it's all good, and I'm back! Thank you to all the people who checked in with me. 💙
Let's get back to business!
Should HTML allow us to ship responsive videos? How can you optimize your fetch calls? And is there an easy way to escape CSS classes in JavaScript?
This week's Web Weekly includes all the answers and much more. Enjoy!
People were raving about barrel files this week. What's a barrel file? Here's one.
The idea behind barrel files…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to style element descendants with Tailwind CSS (#tilPost)]]></title>
        <id>https://www.stefanjudis.com/today-i-learned/how-to-style-element-descendants-with-tailwind-css/</id>
        <link href="https://www.stefanjudis.com/today-i-learned/how-to-style-element-descendants-with-tailwind-css/"/>
        <updated>2023-10-13T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm maintaining a project built with Tailwind at work. I'm no daily Tailwinder, but usually, I manage just fine. But recently, a trivial task took me quite some time to get right. I wanted to rotate an SVG icon depending on the details element's :open state.
Getting started with Tailwind is straightforward (a CSS property just maps to a class name, right?), but I still have to wrap my head around advanced features like class-based element relationships.
How would you achieve the following CSS in Tailwind?
details:open svg {
  rotate: 0.5turn;
}

Option 1 — don't use Tailwind and go vanilla CSS

When googling around, you'll find the advice to "just use" CSS and import a CSS file somewhere. Sure, this works, but what's the point of this? Tailwind promises to solve the CSS maintenance problem…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to style element descendents with Tailwind CSS (#tilPost)]]></title>
        <id>https://www.stefanjudis.com/today-i-learned/how-to-style-element-descendents-with-tailwind-css/</id>
        <link href="https://www.stefanjudis.com/today-i-learned/how-to-style-element-descendents-with-tailwind-css/"/>
        <updated>2023-10-13T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'm maintaining a project built with Tailwind at work. I'm no daily Tailwinder, but usually, I manage just fine. But recently, a trivial task took me quite some time to get right. I wanted to rotate an SVG icon depending on the details element's :open state.
Getting started with Tailwind is straightforward (a CSS property just maps to a class name, right?), but I still have to wrap my head around advanced features like class-based element relationships.
How would you achieve the following CSS in Tailwind?
details:open svg {
  rotate: 0.5turn;
}

Option 1 — don't use Tailwind and go vanilla CSS

When googling around, you'll find the advice to "just use" CSS and import a CSS file somewhere. Sure, this works, but what's the point of this? Tailwind promises to solve the CSS maintenance problem…]]></summary>
        <author>
            <name>Stefan Judis Web Development</name>
        </author>
    </entry>
</feed>